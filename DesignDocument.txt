1. Introduction
PTM is a modular project management system designed with a clean architecture approach, separating domain logic, application services, infrastructure, and API layers.

2. Solution Structure
2.1 Domain
- Contains core business entities, enums, and interfaces.
- Defines the fundamental data models and business rules.

2.2 Application
- Implements use cases as commands and queries.
- Contains DTOs, validation, and mapping profiles.
- Handles business logic orchestration without infrastructure concerns.

2.3 Infrastructure
- Provides data access implementations and background services.
- Contains repository implementations and database context.

2.4 Server
- Exposes REST API endpoints via controllers.
- Handles dependency injection and application startup.

2.5 Tests
- Contains unit and integration tests for application logic.

3. Main Components
3.1 Entities
- User, Project, AppTask, Role represent core data structures.

3.2 Commands and Queries
- Command handlers manage create, update, and delete operations.
- Query handlers manage data retrieval.

3.3 DTOs and Validation
- DTOs define data contracts for API communication.
- Validation ensures data integrity before processing.

3.4 Repositories
- Abstract data access logic for entities.

3.5 Background Jobs
- Services for periodic or scheduled tasks (overdue task checks).

4. Data Flow
- Client sends HTTP request to Server.
- Server controller maps request to command/query.
- Application layer processes logic, interacts with domain and infrastructure.
- Infrastructure handles data persistence.
- Response is returned to client.

5. Security
- Authentication and authorization handled in Server layer.
- Uses DTOs to avoid exposing internal models.

6. Extensibility
- New features can be added by extending commands, queries, and entities.
- Infrastructure can be swapped with minimal changes to application logic. 